/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { OracleValidation, OracleValidationArgs } from '../../hooked';
export type Validation = Account<ValidationAccountData>;
export type ValidationAccountData = {
    discriminator: Array<number>;
    validation: OracleValidation;
};
export type ValidationAccountDataArgs = {
    validation: OracleValidationArgs;
};
export declare function getValidationAccountDataSerializer(): Serializer<ValidationAccountDataArgs, ValidationAccountData>;
export declare function deserializeValidation(rawAccount: RpcAccount): Validation;
export declare function fetchValidation(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<Validation>;
export declare function safeFetchValidation(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<Validation | null>;
export declare function fetchAllValidation(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<Validation[]>;
export declare function safeFetchAllValidation(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<Validation[]>;
export declare function getValidationGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<Validation, {
    discriminator: Array<number>;
    validation: OracleValidationArgs;
}>;
