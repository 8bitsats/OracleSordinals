"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCustomDataValidationGpaBuilder = exports.safeFetchAllCustomDataValidation = exports.fetchAllCustomDataValidation = exports.safeFetchCustomDataValidation = exports.fetchCustomDataValidation = exports.deserializeCustomDataValidation = exports.getCustomDataValidationAccountDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const hooked_1 = require("../../hooked");
function getCustomDataValidationAccountDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['authority', (0, serializers_1.publicKey)()],
        ['sequenceNum', (0, serializers_1.u64)()],
        ['validation', (0, hooked_1.getOracleValidationSerializer)()],
    ], { description: 'CustomDataValidationAccountData' }), (value) => ({ ...value, discriminator: [84, 54, 79, 74, 35, 250, 78, 146] }));
}
exports.getCustomDataValidationAccountDataSerializer = getCustomDataValidationAccountDataSerializer;
function deserializeCustomDataValidation(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getCustomDataValidationAccountDataSerializer());
}
exports.deserializeCustomDataValidation = deserializeCustomDataValidation;
async function fetchCustomDataValidation(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'CustomDataValidation');
    return deserializeCustomDataValidation(maybeAccount);
}
exports.fetchCustomDataValidation = fetchCustomDataValidation;
async function safeFetchCustomDataValidation(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists
        ? deserializeCustomDataValidation(maybeAccount)
        : null;
}
exports.safeFetchCustomDataValidation = safeFetchCustomDataValidation;
async function fetchAllCustomDataValidation(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'CustomDataValidation');
        return deserializeCustomDataValidation(maybeAccount);
    });
}
exports.fetchAllCustomDataValidation = fetchAllCustomDataValidation;
async function safeFetchAllCustomDataValidation(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeCustomDataValidation(maybeAccount));
}
exports.safeFetchAllCustomDataValidation = safeFetchAllCustomDataValidation;
function getCustomDataValidationGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplCoreOracleExample', '4RZ7RhXeL4oz4kVX5fpRfkNQ3nz1n4eruqBn2AGPQepo');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        discriminator: [0, (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        authority: [8, (0, serializers_1.publicKey)()],
        sequenceNum: [40, (0, serializers_1.u64)()],
        validation: [48, (0, hooked_1.getOracleValidationSerializer)()],
    })
        .deserializeUsing((account) => deserializeCustomDataValidation(account))
        .whereField('discriminator', [84, 54, 79, 74, 35, 250, 78, 146]);
}
exports.getCustomDataValidationGpaBuilder = getCustomDataValidationGpaBuilder;
//# sourceMappingURL=customDataValidation.js.map