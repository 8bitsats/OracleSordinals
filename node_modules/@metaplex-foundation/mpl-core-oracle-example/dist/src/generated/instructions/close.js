"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.close = exports.getCloseInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getCloseInstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })]], { description: 'CloseInstructionData' }), (value) => ({
        ...value,
        discriminator: [98, 165, 201, 177, 108, 65, 206, 96],
    }));
}
exports.getCloseInstructionDataSerializer = getCloseInstructionDataSerializer;
// Instruction.
function close(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplCoreOracleExample', '4RZ7RhXeL4oz4kVX5fpRfkNQ3nz1n4eruqBn2AGPQepo');
    // Accounts.
    const resolvedAccounts = {
        signer: {
            index: 0,
            isWritable: false,
            value: input.signer ?? null,
        },
        payer: {
            index: 1,
            isWritable: true,
            value: input.payer ?? null,
        },
        account: {
            index: 2,
            isWritable: true,
            value: input.account ?? null,
        },
    };
    // Default values.
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getCloseInstructionDataSerializer().serialize({});
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.close = close;
//# sourceMappingURL=close.js.map