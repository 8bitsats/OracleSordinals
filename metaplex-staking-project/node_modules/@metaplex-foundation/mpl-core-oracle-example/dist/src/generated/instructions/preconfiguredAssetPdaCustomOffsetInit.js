"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.preconfiguredAssetPdaCustomOffsetInit = exports.getPreconfiguredAssetPdaCustomOffsetInitInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const hooked_1 = require("../../hooked");
const shared_1 = require("../shared");
function getPreconfiguredAssetPdaCustomOffsetInitInstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['authority', (0, serializers_1.publicKey)()],
        ['asset', (0, serializers_1.publicKey)()],
        ['oracleData', (0, hooked_1.getOracleValidationSerializer)()],
    ], { description: 'PreconfiguredAssetPdaCustomOffsetInitInstructionData' }), (value) => ({
        ...value,
        discriminator: [243, 138, 87, 119, 206, 51, 141, 90],
    }));
}
exports.getPreconfiguredAssetPdaCustomOffsetInitInstructionDataSerializer = getPreconfiguredAssetPdaCustomOffsetInitInstructionDataSerializer;
// Instruction.
function preconfiguredAssetPdaCustomOffsetInit(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplCoreOracleExample', '4RZ7RhXeL4oz4kVX5fpRfkNQ3nz1n4eruqBn2AGPQepo');
    // Accounts.
    const resolvedAccounts = {
        signer: {
            index: 0,
            isWritable: false,
            value: input.signer ?? null,
        },
        payer: {
            index: 1,
            isWritable: true,
            value: input.payer ?? null,
        },
        account: {
            index: 2,
            isWritable: true,
            value: input.account ?? null,
        },
        systemProgram: {
            index: 3,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = {
        ...input,
    };
    // Default values.
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'programId', programId);
    // Data.
    const data = getPreconfiguredAssetPdaCustomOffsetInitInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.preconfiguredAssetPdaCustomOffsetInit = preconfiguredAssetPdaCustomOffsetInit;
//# sourceMappingURL=preconfiguredAssetPdaCustomOffsetInit.js.map