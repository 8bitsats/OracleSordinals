/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { OracleValidation, OracleValidationArgs } from '../../hooked';
export type CustomDataValidation = Account<CustomDataValidationAccountData>;
export type CustomDataValidationAccountData = {
    discriminator: Array<number>;
    authority: PublicKey;
    sequenceNum: bigint;
    validation: OracleValidation;
};
export type CustomDataValidationAccountDataArgs = {
    authority: PublicKey;
    sequenceNum: number | bigint;
    validation: OracleValidationArgs;
};
export declare function getCustomDataValidationAccountDataSerializer(): Serializer<CustomDataValidationAccountDataArgs, CustomDataValidationAccountData>;
export declare function deserializeCustomDataValidation(rawAccount: RpcAccount): CustomDataValidation;
export declare function fetchCustomDataValidation(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<CustomDataValidation>;
export declare function safeFetchCustomDataValidation(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<CustomDataValidation | null>;
export declare function fetchAllCustomDataValidation(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<CustomDataValidation[]>;
export declare function safeFetchAllCustomDataValidation(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<CustomDataValidation[]>;
export declare function getCustomDataValidationGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<CustomDataValidation, {
    discriminator: Array<number>;
    authority: PublicKey;
    sequenceNum: number | bigint;
    validation: OracleValidationArgs;
}>;
