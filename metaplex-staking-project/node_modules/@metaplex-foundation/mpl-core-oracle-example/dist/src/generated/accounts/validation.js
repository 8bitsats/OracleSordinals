"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getValidationGpaBuilder = exports.safeFetchAllValidation = exports.fetchAllValidation = exports.safeFetchValidation = exports.fetchValidation = exports.deserializeValidation = exports.getValidationAccountDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const hooked_1 = require("../../hooked");
function getValidationAccountDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        ['validation', (0, hooked_1.getOracleValidationSerializer)()],
    ], { description: 'ValidationAccountData' }), (value) => ({
        ...value,
        discriminator: [130, 241, 151, 113, 169, 195, 219, 148],
    }));
}
exports.getValidationAccountDataSerializer = getValidationAccountDataSerializer;
function deserializeValidation(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getValidationAccountDataSerializer());
}
exports.deserializeValidation = deserializeValidation;
async function fetchValidation(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'Validation');
    return deserializeValidation(maybeAccount);
}
exports.fetchValidation = fetchValidation;
async function safeFetchValidation(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists ? deserializeValidation(maybeAccount) : null;
}
exports.safeFetchValidation = safeFetchValidation;
async function fetchAllValidation(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'Validation');
        return deserializeValidation(maybeAccount);
    });
}
exports.fetchAllValidation = fetchAllValidation;
async function safeFetchAllValidation(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeValidation(maybeAccount));
}
exports.safeFetchAllValidation = safeFetchAllValidation;
function getValidationGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplCoreOracleExample', '4RZ7RhXeL4oz4kVX5fpRfkNQ3nz1n4eruqBn2AGPQepo');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        discriminator: [0, (0, serializers_1.array)((0, serializers_1.u8)(), { size: 8 })],
        validation: [8, (0, hooked_1.getOracleValidationSerializer)()],
    })
        .deserializeUsing((account) => deserializeValidation(account))
        .whereField('discriminator', [130, 241, 151, 113, 169, 195, 219, 148]);
}
exports.getValidationGpaBuilder = getValidationGpaBuilder;
//# sourceMappingURL=validation.js.map